define(function (require, exports, module) {
    "use strict";
    
    /* === LOAD BRACKET MODULES === */
    var CommandManager  = brackets.getModule("command/CommandManager"),
        Menus           = brackets.getModule("command/Menus"),
        DocumentManager = brackets.getModule("document/DocumentManager"),
        Dialogs         = brackets.getModule("widgets/Dialogs"),
        AppInit         = brackets.getModule("utils/AppInit");
    
        /*
        File            = brackets.getModule("filesystem/File"),
        FileSystem      = brackets.getModule("filesystem/FileSystem"),
        FileUtils       = brackets.getModule("file/FileUtils");
        */
    
        
    /* === MAIN VARIABLES === */
    var backupInterval = 'undefined',
        msInMins = 60000,
        timeInMins = 3,
        backupTime = 180000,
        isAutoBackup = false;

    
    /* === MAIN FUNCTIONS ===  */
    function createFileBackup() {
        console.log('createFileBackup()');
        
        //Clear auto backup job
        if(isAutoBackup) clearInterval(backupInterval);
        
        //Get the current document
        var currDoc = DocumentManager.getCurrentDocument();
        
        //console.log(currDoc);
        if(typeof currDoc != 'undefined' && currDoc != null) {
            var currDocTxt = currDoc.getText();
            var currDocFile = currDoc.file;

            //Blind save the orig file first
            var options = {};
            options.blind = true;
            currDocFile.write(currDocTxt, options);

            //Change path and set file variables
            var currDocOrigPath = currDoc.file._path;
            var currDocBakPath = currDocOrigPath+'.bak';

            //Change doc path to bak
            currDoc.file._path = currDocBakPath;

            //Create/write the backup file
            currDocFile.write(currDocTxt, options);

            //Change doc path to orig
            currDoc.file._path = currDocOrigPath;
        }
        
        //Restart the auto backup, if enabled
        if(isAutoBackup) startAutoBackup();
        
    } //end of createFileBackup()
    
    function updateAutoBackupTime() {
        console.log('updateAutoBackupTime()');
        backupTime = parseInt(timeInMins) * msInMins /*300000 MS = 5 mins., 180000 MS = 3mins.*/;
    }
    
    function startAutoBackup() {
        console.log('startAutoBackup()');
        if(!isAutoBackup) {
            menu.removeMenuItem(START_AUTO_BACKUP);
            menu.addMenuItem(STOP_AUTO_BACKUP);
            isAutoBackup = true;
        }
        clearInterval(backupInterval);
        backupInterval = window.setInterval(function() {
            console.log('[autoBackup]');
            createFileBackup();
        }, backupTime);
    }
    
    function stopAutoBackup() {
        menu.addMenuItem(START_AUTO_BACKUP);
        menu.removeMenuItem(STOP_AUTO_BACKUP);
        isAutoBackup = false
        console.log('stopAutoBackup()');
        clearInterval(backupInterval);
    }
    
    function setAutoBackupTime() {
        console.log('setAutoBackupTime()');
        var btnArr = [
            { className: 'DIALOG_BTN_CLASS_PRIMARY', id: 'DIALOG_BTN_OK', text: 'OK' },
        ]
        
        Dialogs.showModalDialog(
            "backupTimerSettings", 
            "Backup - Set Auto Backup Time",
            
            '<label>Time in minutes (minimum is 1): </label>'+
            '<input type="text" name="min-time" id="min-time" value="'+ timeInMins +'"/>',
    
            btnArr
        );
        
        /* --- To be placed in callback ---
        var suppliedTime = parseInt(document.querySelector("#min-time").value);
        if(suppliedTime >= 1) timeInMins = suppliedTime;
        else timeInMins = 1;
        console.log("timeInMins: "+timeInMins);
        */
    }
    
    function dummyFunction() {
        console.log('dummyFunction()');
    }


    /* === APP INIT === */
    AppInit.appReady(function () {
        
        /* === REGISTER COMMANDS === */
        var CREATE_FILE_BACKUP = "bracketsBackup.createFileBackup";
        CommandManager.register("Backup - CREATE", CREATE_FILE_BACKUP, createFileBackup);

        var START_AUTO_BACKUP = "bracketsBackup.startAutoFileBackup";
        CommandManager.register("Backup - START Auto", START_AUTO_BACKUP, startAutoBackup);

        var STOP_AUTO_BACKUP = "bracketsBackup.stopAutoBackup";
        CommandManager.register("Backup - STOP Auto", STOP_AUTO_BACKUP, stopAutoBackup);

        var SET_AUTO_BACKUP_TIME = "bracketsBackup.dummyFunction";
        CommandManager.register("Backup - SET Auto Backup TIME", SET_AUTO_BACKUP_TIME, setAutoBackupTime);

        //var DUMMY_FUNCTION = "bracketsBackup.dummyFunction";
        //CommandManager.register("Backup - Dummy Function", DUMMY_FUNCTION, dummyFunction);

        //Update the auto backup time
        updateAutoBackupTime();
        

        /* === CREATE MENU ITEM === */
        var menu = Menus.addMenu("Backup", 'Backup', Menus.AFTER, Menus.AppMenuBar.FILE_MENU);
        menu.addMenuItem(CREATE_FILE_BACKUP);
        menu.addMenuItem(START_AUTO_BACKUP);
        menu.addMenuItem(SET_AUTO_BACKUP_TIME);
    });
    
    
});
